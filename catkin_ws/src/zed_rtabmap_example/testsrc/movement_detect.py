# -*- coding: utf-8 -*-
"""movement_detect.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17XfdNiopOZfwblU7DQtljolgZfUtgkRM
"""

import rospy
import sys, select, termios, tty
import pyzed.sl as sl
import threading
#set up a new array for the output of the position
temp_x = []




if __name__ == "__main__":
  #Hard code moving basic set
  settings = termios.tcgetattr(sys.stdin)

  rospy.init_node('teleop_twist_keyboard')

  speed = rospy.get_param("~speed", 0.5)
  turn = rospy.get_param("~turn", 1.0)
  repeat = rospy.get_param("~repeat_rate", 0.0)
  key_timeout = rospy.get_param("~key_timeout", 0.0)
  if key_timeout == 0.0:
      key_timeout = None
  
  pub_thread = PublishThread(repeat)

  x = 0
  y = 0
  z = 0
  th = 0
  status = 0
  
  #position data setting
  init = sl.InitParameters(camera_resolution=sl.RESOLUTION.HD720,
                                coordinate_units=sl.UNIT.METER,
                                coordinate_system=sl.COORDINATE_SYSTEM.RIGHT_HANDED_Y_UP)
  zed = sl.Camera()
  status = zed.open(init)
  if status != sl.ERROR_CODE.SUCCESS:
      print(repr(status))
      exit()

  tracking_params = sl.PositionalTrackingParameters()
  zed.enable_positional_tracking(tracking_params)

  runtime = sl.RuntimeParameters()
  camera_pose = sl.Pose()

  camera_info = zed.get_camera_information()


  py_translation = sl.Translation()
  pose_data = sl.Transform()

  text_translation = ""
  text_rotation = ""

  while (true):
    
    try:
      pub_thread.wait_for_subscribers()
      pub_thread.update(x, y, z, th, speed, turn)

      print(msg)
      print(vels(speed,turn))
      if zed.grab(runtime) == sl.ERROR_CODE.SUCCESS:
        tracking_state = zed.get_position(camera_pose)
        if tracking_state == sl.POSITIONAL_TRACKING_STATE.OK:
            rotation = camera_pose.get_rotation_vector()
            translation = camera_pose.get_translation(py_translation)
            text_rotation = str((round(rotation[0], 2), round(rotation[1], 2), round(rotation[2], 2)))
            text_translation = str((round(translation.get()[0], 2), round(translation.get()[1], 2), round(translation.get()[2], 2)))
            pose_data = camera_pose.pose_data(sl.Transform())
        for i in range(10):
          temp_x.append(pose_data)
          temp_x = list(temp_x)
        while (true):
          if (temp_x.count(temp_x[0])==temp_x.length):
            #hard code
            #forward

            for j in range(10):
                key = 'i'
                x = moveBindings[key][0]
                y = moveBindings[key][1]
                z = moveBindings[key][2]
                th = moveBindings[key][3]
                pub_thread.update(x, y, z, th, speed, turn)

            temp_x.pop(0)
            temp_x.append(pose_data)

            if (temp_x.count(temp_x[0])==len(temp_x)):
                for j in range(10):
                  key = 'u'
                  x = moveBindings[key][0]
                  y = moveBindings[key][1]
                  z = moveBindings[key][2]
                  th = moveBindings[key][3]
                  pub_thread.update(x, y, z, th, speed, turn)

                temp_x.pop(0)
                temp_x.append(pose_data)
                if (temp_x.count(temp_x[0])==len(temp_x)):
                    for j in range(10):
                      key = 'o'
                      x = moveBindings[key][0]
                      y = moveBindings[key][1]
                      z = moveBindings[key][2]
                      th = moveBindings[key][3]
                      pub_thread.update(x, y, z, th, speed, turn)    
                    temp_x.pop(0)
                    temp_x.append(pose_data)    
                    if (temp_x.count(temp_x[0])==len(temp_x)):
                        for j in range(10):
                          key = ','
                          x = moveBindings[key][0]
                          y = moveBindings[key][1]
                          z = moveBindings[key][2]
                          th = moveBindings[key][3]
                          pub_thread.update(x, y, z, th, speed, turn)    
                        temp_x.pop(0)
                        temp_x.append(pose_data)
                        if (temp_x.count(temp_x[0])==len(temp_x)):
                            rospy.loginfo("Help! Car stucked!!!")
                            break
                        else:
                            temp_x.pop(0)
                            temp_x.append(pose_data)

                    else:  
                        temp_x.pop(0)
                        temp_x.append(pose_data)
                        continue
                else:  
                    temp_x.pop(0)
                    temp_x.append(pose_data)
                    continue        




            else:
                temp_x.pop(0)
                temp_x.append(pose_data)
                continue

        else:
            temp_x.pop(0)
            temp_x.append(pose_data)
    except Exception as e:
        print(e)
  zed.close()